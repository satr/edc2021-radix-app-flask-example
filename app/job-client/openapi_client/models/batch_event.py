# coding: utf-8

"""
    Radix job scheduler server.

    This is the API Server for the Radix job scheduler server.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from openapi_client.models.job_status import JobStatus

class BatchEvent(BaseModel):
    """
    BatchEvent holds general information about batch event on change of status  # noqa: E501
    """
    batch_name: Optional[StrictStr] = Field(None, alias="batchName", description="BatchName Optional Batch ID of a job")
    batch_type: Optional[StrictStr] = Field(None, alias="batchType", description="BatchType Single job or multiple jobs batch")
    created: StrictStr = Field(..., description="Created timestamp")
    ended: Optional[StrictStr] = Field(None, description="Ended timestamp")
    event: StrictStr = Field(...)
    job_id: Optional[StrictStr] = Field(None, alias="jobId", description="JobId Optional ID of a job")
    job_statuses: Optional[conlist(JobStatus)] = Field(None, alias="jobStatuses", description="JobStatuses of the jobs in the batch")
    message: Optional[StrictStr] = Field(None, description="Message, if any, of the job")
    name: StrictStr = Field(..., description="Name of the job")
    started: Optional[StrictStr] = Field(None, description="Started timestamp")
    status: Optional[StrictStr] = Field(None, description="Status of the job")
    __properties = ["batchName", "batchType", "created", "ended", "event", "jobId", "jobStatuses", "message", "name", "started", "status"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Waiting', 'Running', 'Succeeded', 'Stopping', 'Stopped', 'Failed', 'DeadlineExceeded'):
            raise ValueError("must be one of enum values ('Waiting', 'Running', 'Succeeded', 'Stopping', 'Stopped', 'Failed', 'DeadlineExceeded')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BatchEvent:
        """Create an instance of BatchEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in job_statuses (list)
        _items = []
        if self.job_statuses:
            for _item in self.job_statuses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['jobStatuses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BatchEvent:
        """Create an instance of BatchEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BatchEvent.parse_obj(obj)

        _obj = BatchEvent.parse_obj({
            "batch_name": obj.get("batchName"),
            "batch_type": obj.get("batchType"),
            "created": obj.get("created"),
            "ended": obj.get("ended"),
            "event": obj.get("event"),
            "job_id": obj.get("jobId"),
            "job_statuses": [JobStatus.from_dict(_item) for _item in obj.get("jobStatuses")] if obj.get("jobStatuses") is not None else None,
            "message": obj.get("message"),
            "name": obj.get("name"),
            "started": obj.get("started"),
            "status": obj.get("status")
        })
        return _obj


