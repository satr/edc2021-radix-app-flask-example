# coding: utf-8

"""
    Radix job scheduler server.

    This is the API Server for the Radix job scheduler server.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from openapi_client.models.job_schedule_description import JobScheduleDescription
from openapi_client.models.radix_job_component_config import RadixJobComponentConfig

class BatchScheduleDescription(BaseModel):
    """
    BatchScheduleDescription holds description about batch scheduling job  # noqa: E501
    """
    default_radix_job_component_config: Optional[RadixJobComponentConfig] = Field(None, alias="defaultRadixJobComponentConfig")
    job_schedule_descriptions: conlist(JobScheduleDescription) = Field(..., alias="jobScheduleDescriptions", description="JobScheduleDescriptions descriptions of jobs to schedule within the batch")
    __properties = ["defaultRadixJobComponentConfig", "jobScheduleDescriptions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BatchScheduleDescription:
        """Create an instance of BatchScheduleDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of default_radix_job_component_config
        if self.default_radix_job_component_config:
            _dict['defaultRadixJobComponentConfig'] = self.default_radix_job_component_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in job_schedule_descriptions (list)
        _items = []
        if self.job_schedule_descriptions:
            for _item in self.job_schedule_descriptions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['jobScheduleDescriptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BatchScheduleDescription:
        """Create an instance of BatchScheduleDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BatchScheduleDescription.parse_obj(obj)

        _obj = BatchScheduleDescription.parse_obj({
            "default_radix_job_component_config": RadixJobComponentConfig.from_dict(obj.get("defaultRadixJobComponentConfig")) if obj.get("defaultRadixJobComponentConfig") is not None else None,
            "job_schedule_descriptions": [JobScheduleDescription.from_dict(_item) for _item in obj.get("jobScheduleDescriptions")] if obj.get("jobScheduleDescriptions") is not None else None
        })
        return _obj


