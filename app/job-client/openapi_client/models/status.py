# coding: utf-8

"""
    Radix job scheduler server.

    This is the API Server for the Radix job scheduler server.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class Status(BaseModel):
    """
    Status is a return value for calls that don't return other objects or when a request returns an error  # noqa: E501
    """
    code: Optional[StrictInt] = Field(None, description="Suggested HTTP return code for this status, 0 if not set.")
    message: Optional[StrictStr] = Field(None, description="A human-readable description of the status of this operation.")
    reason: Optional[StrictStr] = None
    status: Optional[StrictStr] = Field(None, description="Status of the operation. One of: \"Success\" or \"Failure\".")
    __properties = ["code", "message", "reason", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Status:
        """Create an instance of Status from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Status:
        """Create an instance of Status from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Status.parse_obj(obj)

        _obj = Status.parse_obj({
            "code": obj.get("code"),
            "message": obj.get("message"),
            "reason": obj.get("reason"),
            "status": obj.get("status")
        })
        return _obj


